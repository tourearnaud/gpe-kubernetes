name: CI/CD Pipeline - Build, Test, Push & Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  KUBECONFIG: ${{ secrets.KUBECONFIG }}

jobs:
  build-test-push-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout le code source
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Setup Node.js (frontend)
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "21.3.0"

      # 3. Installer les dépendances frontend
      - name: Install frontend dependencies
        run: npm install --prefix front

      # 4. Lancer les tests frontend
      - name: Run frontend tests
        run: npm test --prefix front

      # 5. Setup .NET SDK 7.0 (backend)
      - name: Setup .NET SDK 7.0
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x

      # 5.1 Setup .NET Runtime 6.0 (pour dotnet-ef si besoin)
      - name: Setup .NET Runtime 6.0
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x

      # 6. Restaurer les dépendances .NET
      - name: Restore .NET dependencies
        run: dotnet restore gpe.sln

      # 7. Installer dotnet-ef tool (nécessaire pour migrations EF Core)
      - name: Install dotnet-ef tool
        run: |
          dotnet tool install --global dotnet-ef --version 7.0.20 || echo "dotnet-ef already installed"
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      # 8. Build backend en mode Release
      - name: Build backend
        run: dotnet build --no-restore --configuration Release

      # 9. Définir les variables d'environnement pour la base de données (à adapter si besoin)
      - name: Set DB environment variables for EF migrations
        env:
          DB_SERVER: ${{ secrets.DB_SERVER }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          echo "DB_SERVER=$DB_SERVER" >> $GITHUB_ENV
          echo "DB_DATABASE=$DB_DATABASE" >> $GITHUB_ENV
          echo "DB_USER=$DB_USER" >> $GITHUB_ENV
          echo "DB_PASSWORD=$DB_PASSWORD" >> $GITHUB_ENV

      # 10. Appliquer les migrations de la base de données (EF Core)
      - name: Apply database migrations
        run: dotnet ef database update --project API

      # 11. Connexion au registre GHCR
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 12. Build l'image Docker backend
      - name: Build backend Docker image
        run: docker build -t ghcr.io/${{ github.repository_owner }}/gpe-api:latest ./API

      # 13. Push l'image backend sur GHCR
      - name: Push backend Docker image
        run: docker push ghcr.io/${{ github.repository_owner }}/gpe-api:latest

      # 14. Build l'image Docker frontend
      - name: Build frontend Docker image
        run: docker build -t ghcr.io/${{ github.repository_owner }}/gpe-front:latest ./front

      # 15. Push l'image frontend sur GHCR
      - name: Push frontend Docker image
        run: docker push ghcr.io/${{ github.repository_owner }}/gpe-front:latest

      # 16. Installer kubectl
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      # 17. Recréer le fichier kubeconfig à partir du secret GitHub
      - name: Decode kubeconfig from secret
        run: echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig.yaml

      # 18. Déployer les manifests Kubernetes
      - name: Deploy to Kubernetes cluster
        run: |
          kubectl --kubeconfig=kubeconfig.yaml apply -f k8s/configmap-api.yaml
          kubectl --kubeconfig=kubeconfig.yaml apply -f k8s/secret-api.yaml
          kubectl --kubeconfig=kubeconfig.yaml apply -f k8s/mysql-pv.yaml
          kubectl --kubeconfig=kubeconfig.yaml apply -f k8s/mysql-pvc.yaml
          kubectl --kubeconfig=kubeconfig.yaml apply -f k8s/mysql-deployment.yaml
          kubectl --kubeconfig=kubeconfig.yaml apply -f k8s/mysql-service.yaml
          kubectl --kubeconfig=kubeconfig.yaml apply -f k8s/ngnix-conditional-rewrite.yaml
          kubectl --kubeconfig=kubeconfig.yaml apply -f k8s/gpe-api-nodeport.yaml
          kubectl --kubeconfig=kubeconfig.yaml apply -f k8s/api-deployment.yaml
          kubectl --kubeconfig=kubeconfig.yaml apply -f k8s/api-service.yaml
          kubectl --kubeconfig=kubeconfig.yaml apply -f k8s/front-deployment.yaml
          kubectl --kubeconfig=kubeconfig.yaml apply -f k8s/front-service.yaml
          kubectl --kubeconfig=kubeconfig.yaml apply -f k8s/gpe-ingress.yaml

      # 19. Vérifier les pods déployés
      - name: Check Kubernetes pods status
        run: kubectl --kubeconfig=kubeconfig.yaml get pods -A
